{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","userName","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc321868.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {sendMessage, isTyping} from 'react-chat-engine'\nimport {SendOutlined, PictureOutlined} from '@ant-design/icons'\n\nconst MessageForm = (props) => {\n\n    const [value, setValue] = useState(''); \n    const{chatId,creds} = props;\n\n    const handleSubmit = (event) => {\n        event.preventDefault(); //Prevent refresh\n        \n        const text = value.trim();\n\n        if(text.length >0) sendMessage(creds, chatId, {text});\n\n        setValue(''); //Resets the Message Field to empty\n    }\n\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n\n        isTyping(props,chatId);\n    }\n\n    const handleUpload = (event) => {\n        sendMessage(creds, chatId,{files: event.target.files, text: ''})\n    }\n\n    return (\n        <form className =\"message-form\" onSubmit = {handleSubmit}>\n            <input \n                className = \"message-input\"\n                placeholder = \"Send a message...\"\n                value = {value}\n                onChange = {handleChange}\n                onSubmit = {handleSubmit}\n            />\n            <label htmlFor = \"upload-button\">\n                <span className=\"image-button\">\n                    <PictureOutlined className = \"picture-icon\"/>\n                </span>\n            </label>\n            <input \n                type=\"file\"\n                multiple = {false}\n                id = \"upload-button\"\n                style={{display: 'none'}} //as we alreary have pictur icon above\n                onChange = {handleUpload}\n            />\n            <button type = \"submit\" className=\"send-button\">\n                <SendOutlined className = \"send-icon\" /> \n            </button>\n        </form>\n    );\n}\n\nexport default MessageForm;","const MyMessage = ({message}) => {\n    if(message?.attachments?.length > 0){\n        return(\n            <img  \n                src = {message.attachments[0].file}\n                alt = \"message-attachments\"\n                className = \"message-image\"\n                style = {{ float : 'right'}}\n            />\n        )\n    }\n    return (\n        <div className = \"message\" style = {{ float : 'right', marginRight: '18px', color : 'white', backgroundColor : '#3B2A50'}}>\n            {message.text}\n        </div>\n    );\n}\n\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => { \n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.userName\n\n    return (\n        <div className = \"message-row\">\n            {isFirstMessageByUser && ( //for first message\n                <div \n                    className = \"message-avatar\"\n                    style = {{backgroundImage : `url(${message?.sender?.avatar })`}}\n                />\n            )}\n            { message?.attachments?.length > 0 //for all messages\n                ?(\n                    <img  \n                        src = {message.attachments[0].file}\n                        alt = \"message-attachments\"\n                        className = \"message-image\"\n                        style = {{ marginLeft: isFirstMessageByUser ? '4px' : '48px'}}\n                    />\n                ) : (\n                    <div className = \"message\" style = {{ float : 'left', backgroundColor : '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\n                        {message.text}\n                    </div>\n                )\n            \n            }\n        </div>\n    );\n}\n\nexport default TheirMessage;","import MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\n\nconst ChatFeed = (props) => {\n    //console.log(props);\n    const {chats,activeChat,userName, messages} = props;\n\n    const chat = chats &&chats[activeChat];\n\n    //console.log(chat, userName,messages);\n\n    const renderReadReceipts = (message, isMyMessage) => {\n        return chat.people.map((person, index) => person.last_read === message.id && (\n            <div\n                key = {`read_${index}`}\n                className = \"read-receipt\"\n                style = {{\n                    float: isMyMessage ?'right': 'left',\n                    backgroundImage: `url(${person?.person?.avatar })`\n                                }}\n            />\n        ) )\n    }\n\n    const renderMessages = () => {\n        const keys = Object.keys(messages);\n        //console.log(keys); ID's of messages\n        return keys.map((key,index) => {\n            const message = messages[key];\n            const lastMessageKey = index === 0 ? null : keys[index-1];\n            const isMyMessage = userName === message.sender.username;\n\n            return(\n                <div key = {`msg_${index}`} style = {{width: '100%'}} >\n                        <div className = \"message-block\">\n                            {\n                                isMyMessage\n                                ?<MyMessage  message = {message} />\n                                : <TheirMessage message = {message} lastMessage = {messages[lastMessageKey]} />\n                            }\n                        </div>\n                        <div className = \"read-receipts\" style = {{marginRight : isMyMessage ? '18px' : '0px',marginLeft : isMyMessage ? '0px' : '68px '}}>\n                        {renderReadReceipts(message, isMyMessage)}\n                        </div>\n                </div>\n            )\n        })\n    }\n    \n\n    if(!chat) return 'Loading.........';\n\n    return (\n        <div className = \"chat-feed\"> \n            <div className = \"chat-title-container\">\n                 <div className = \"chat-title\">{chat?.title}</div>\n                 <div className = \"chat-subtitle\">\n                     {chat.people.map((person) => `${person.person.username}`)} \n                 </div>\n            </div>\n            {renderMessages()}\n            <div style ={{height : '100px'}} />\n            <div className = \"message-form-container\">\n                <MessageForm {...props} chatId= {activeChat} />\n            </div>\n        </div>\n    );\n}\n\nexport default ChatFeed;","import { useState } from \"react\";\nimport axios from'axios';\n\nconst LoginForm = () => {\n    const [username, setUsername] =  useState('');\n    const [password, setPassword] =  useState('');\n    const [error, setError] =  useState('');\n\n    const handleSubmit = async (e)=> {\n        e.preventDefault();\n\n        //username | password => chatengine -> give messages\n        const authObject = {'Project-ID' : \"d3e79a77-5592-407e-ad05-af5f35976584\", 'User-Name': username, 'User-Secret': password }\n\n        try {\n            await axios.get('https://api.chatengine.io/chats', {headers : authObject});\n\n            // works -> logged in\n            localStorage.setItem('username',username);\n            localStorage.setItem('password',password); //Saving Credentials in local Storage\n\n            window.location.reload(); // TO diffrentiate when to show the login form and when to show the ChatEngine\n        } catch (error) {\n            \n            //error -> try with other credential\n            setError('Oh No!  Incorrect Credentials.')\n        }\n        \n        \n        \n    }\n\n    return(\n        <div className = \"wrapper\">\n            <div className = \"form\">\n                <h1 className = \"title\">God Chat</h1>\n                <form onSubmit= {handleSubmit}>\n                    <input type =\"text\" value = {username} onChange={(e) => setUsername(e.target.value)} className = \"input\" placeholder = \"Username \" required />\n                    <input type =\"password\" value = {password} onChange={(e) => setPassword(e.target.value)} className = \"input\" placeholder = \"Password \" required />\n                    <div align = \"center\">\n                        <button type=\"submit\" className = \"button\">\n                            <span>Start Talking</span>\n                        </button>\n                    </div>\n                    <h2 className = \"error\">{error}</h2>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginForm;","import { ChatEngine } from 'react-chat-engine' ;\nimport ChatFeed from './components/ChatFeed';\nimport './App.css';\nimport LoginForm from './components/LoginForm';\n\nconst App = () => {\n\n    if(!localStorage.getItem('username')) return <LoginForm/>\n\n    return(\n        <ChatEngine\n         \n            height = \"100vh\"\n            projectID = \"d3e79a77-5592-407e-ad05-af5f35976584\"\n            userName = {localStorage.getItem('username')}\n            userSecret = {localStorage.getItem('password')}\n            renderChatFeed = {(chatAppProps) => <ChatFeed {...chatAppProps}/>}\n        />\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}